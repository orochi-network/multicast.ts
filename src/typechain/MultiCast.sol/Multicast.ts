/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../common';

export declare namespace Multicast {
  export type MulticastResultStruct = { success: boolean; result: BytesLike };

  export type MulticastResultStructOutput = [success: boolean, result: string] & { success: boolean; result: string };

  export type EvmStateStruct = {
    blockNumber: BigNumberish;
    previousBlockHash: BytesLike;
    difficulty: BigNumberish;
    gaslimit: BigNumberish;
    timestamp: BigNumberish;
  };

  export type EvmStateStructOutput = [
    blockNumber: bigint,
    previousBlockHash: string,
    difficulty: bigint,
    gaslimit: bigint,
    timestamp: bigint,
  ] & {
    blockNumber: bigint;
    previousBlockHash: string;
    difficulty: bigint;
    gaslimit: bigint;
    timestamp: bigint;
  };
}

export interface MulticastInterface extends Interface {
  getFunction(nameOrSignature: 'cast' | 'eth' | 'multicast' | 'state'): FunctionFragment;

  encodeFunctionData(functionFragment: 'cast', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'eth', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'multicast', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'state', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'cast', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'eth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicast', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'state', data: BytesLike): Result;
}

export interface Multicast extends BaseContract {
  connect(runner?: ContractRunner | null): Multicast;
  waitForDeployment(): Promise<this>;

  interface: MulticastInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  cast: TypedContractMethod<[input: BytesLike], [Multicast.MulticastResultStructOutput[]], 'nonpayable'>;

  eth: TypedContractMethod<[addresses: BytesLike], [string], 'view'>;

  multicast: TypedContractMethod<[input: BytesLike], [Multicast.MulticastResultStructOutput[]], 'nonpayable'>;

  state: TypedContractMethod<[], [Multicast.EvmStateStructOutput], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'cast',
  ): TypedContractMethod<[input: BytesLike], [Multicast.MulticastResultStructOutput[]], 'nonpayable'>;
  getFunction(nameOrSignature: 'eth'): TypedContractMethod<[addresses: BytesLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'multicast',
  ): TypedContractMethod<[input: BytesLike], [Multicast.MulticastResultStructOutput[]], 'nonpayable'>;
  getFunction(nameOrSignature: 'state'): TypedContractMethod<[], [Multicast.EvmStateStructOutput], 'view'>;

  filters: {};
}
