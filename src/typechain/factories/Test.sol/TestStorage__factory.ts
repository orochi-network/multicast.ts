/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TestStorage,
  TestStorageInterface,
} from "../../Test.sol/TestStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "key",
        type: "string",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "key",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101e4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063693ec85e1461003b5780638a42ebe914610060575b600080fd5b61004e610049366004610110565b610075565b60405190815260200160405180910390f35b61007361006e366004610152565b61009f565b005b600080838360405161008892919061019e565b908152602001604051809103902054905092915050565b80600084846040516100b292919061019e565b90815260405190819003602001902055505050565b60008083601f8401126100d957600080fd5b50813567ffffffffffffffff8111156100f157600080fd5b60208301915083602082850101111561010957600080fd5b9250929050565b6000806020838503121561012357600080fd5b823567ffffffffffffffff81111561013a57600080fd5b610146858286016100c7565b90969095509350505050565b60008060006040848603121561016757600080fd5b833567ffffffffffffffff81111561017e57600080fd5b61018a868287016100c7565b909790965060209590950135949350505050565b818382376000910190815291905056fea2646970667358221220f159368c30a0277f32fce6ec17a5391b5ce0bc4bf66d9005472cc70ec7d2573164736f6c63430008130033";

type TestStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestStorage__factory extends ContractFactory {
  constructor(...args: TestStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestStorage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestStorage__factory {
    return super.connect(runner) as TestStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestStorageInterface {
    return new Interface(_abi) as TestStorageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestStorage {
    return new Contract(address, _abi, runner) as unknown as TestStorage;
  }
}
